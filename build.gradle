plugins {
  id 'java'
  id 'application'
  id 'distribution'
  //
  id 'de.undercouch.download' version "4.0.4"
  id "org.beryx.jlink" version "2.24.1"
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'org.openjfx.javafxplugin' version '0.0.14'
  id 'org.springframework.boot' version '3.1.2' // must match springBootVersion below
  id 'org.bytedeco.gradle-javacpp-platform' version "1.5.9"
}

ext {
  javaFxVersion = '18.0.2'
  junitVersion = '5.9.2'
  logbackVersion = '1.4.11'
  springBootVersion = '3.1.2'
  javacppPlatform = 'linux-x86_64' // add platforms based on requirement
}

group = 'io.xj'

sourceCompatibility = JavaVersion.VERSION_18
targetCompatibility = JavaVersion.VERSION_18

mainClassName = 'io.xj.gui.WorkstationGuiApplication'

tasks.withType(JavaCompile).tap {
  configureEach {
    options.encoding = 'UTF-8'
  }
}

apply plugin: 'java'

configurations {
  implementation {
    exclude group: "commons-logging", module: "commons-logging"
    exclude group: 'com.google.code.findbugs', module: 'jsr305'
  }
}

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    url = 'https://repo.maven.apache.org/maven2'
  }
  maven {
    url = 'https://packages.confluent.io/maven/'
  }
}

javafx {
  version = "${rootProject.ext.javaFxVersion}"
  modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

//noinspection GroovyAssignabilityCheck
ext.os = org.gradle.internal.os.OperatingSystem.current() as org.gradle.internal.os.OperatingSystem

jlink {
  addExtraDependencies 'javafx'

  forceMerge('log4j-api')

  launcher {
    name = 'javacv-example'
    noConsole = true
  }
  jpackage {
  }
}

dependencies {
  implementation "ch.qos.logback:logback-classic:${rootProject.ext.logbackVersion}"
  implementation "ch.qos.logback:logback-core:${rootProject.ext.logbackVersion}"
  implementation "org.openjfx:javafx-base:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-controls:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-fxml:${rootProject.ext.javaFxVersion}"
  implementation "org.openjfx:javafx-graphics:${rootProject.ext.javaFxVersion}"
  implementation "org.springframework.boot:spring-boot-starter-logging:${rootProject.ext.springBootVersion}"
  implementation "org.springframework.boot:spring-boot-starter:${rootProject.ext.springBootVersion}"
  implementation 'commons-codec:commons-codec:1.15'
  implementation 'commons-io:commons-io:2.11.0'
  implementation 'io.projectreactor.tools:blockhound:1.0.6.RELEASE'
  implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
  implementation 'org.bytedeco:ffmpeg-platform-gpl:6.0-1.5.9' // Optional GPL builds with (almost) everything enabled
  implementation 'org.bytedeco:flandmark-platform:1.07-1.5.8' // Required by org.bytedeco.javacv
  implementation 'org.bytedeco:javacv-platform:1.5.9'
  implementation 'org.reflections:reflections:0.10.2'
  testImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.ext.junitVersion}"
  testImplementation 'org.hamcrest:hamcrest-library:2.2'
  testImplementation 'org.mockito:mockito-junit-jupiter'
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.junitVersion}"
}

//noinspection ConfigurationAvoidance
task 'bootJarZip'(type: Zip) {
  dependsOn('bootJar')
  from "build/libs/"
  archiveBaseName = 'javacv-example'
  include "javacv-example-${rootProject.version}.jar"
  destinationDirectory = file("$buildDir/dist")
}

bootJar {
  launchScript()
  archiveBaseName = 'javacv-example'
}

test {
  useJUnitPlatform()
}
